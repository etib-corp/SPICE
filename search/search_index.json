{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GLADOS USER DOC User doc for SPICE/GLADOS compiler SPICE : Samoussa Processing & Intermediate Code Engine. Features How to use this project Follow the tutorial instructions Install and configure a new or existing project. Run it locally. Deploy it. Fork this project, contribute your improvements, and submit a pull request to help us grow together! View the live demo Coming soon on our youtube channel.","title":"Home"},{"location":"#glados-user-doc","text":"User doc for SPICE/GLADOS compiler SPICE : Samoussa Processing & Intermediate Code Engine.","title":"GLADOS USER DOC"},{"location":"#features","text":"How to use this project Follow the tutorial instructions Install and configure a new or existing project. Run it locally. Deploy it. Fork this project, contribute your improvements, and submit a pull request to help us grow together! View the live demo Coming soon on our youtube channel.","title":"Features"},{"location":"about-mkdocs/","text":"About GLADOS What is GLADOS? The description on the MkDocs site is: Project documentation with Markdown. The objective of this project is to create a custom programming language using Haskell. The implementation will be divided into several mandatory steps, each designed to progressively guide you through increasing levels of difficulty. With a structured approach, the project aims to ensure a smooth learning experience. And as a lighthearted touch, participants are promised cake and grief counseling upon completion of the challenge. Resources Release notes for GLADOS compiler. Reasons to use Glados Compiler Create a programming language tailored to your own design. Built with Haskell for concise, functional, and efficient code generation. Progressive learning curve. The project is divided into manageable steps. Designed to guide you through increasing levels of complexity smoothly. Customizable. Explore and implement unique language features. Freedom to experiment with syntax and semantics. Educational value. Learn compiler design fundamentals, including parsing, type systems, and code generation. Gain a deeper understanding of functional programming and language theory. Engaging and fun. Promised \"cake and grief counseling\" to keep the experience lighthearted. Build something truly unique and rewarding.","title":"About MkDocs"},{"location":"about-mkdocs/#about-glados","text":"","title":"About GLADOS"},{"location":"about-mkdocs/#what-is-glados","text":"The description on the MkDocs site is: Project documentation with Markdown. The objective of this project is to create a custom programming language using Haskell. The implementation will be divided into several mandatory steps, each designed to progressively guide you through increasing levels of difficulty. With a structured approach, the project aims to ensure a smooth learning experience. And as a lighthearted touch, participants are promised cake and grief counseling upon completion of the challenge.","title":"What is GLADOS?"},{"location":"about-mkdocs/#resources","text":"Release notes for GLADOS compiler.","title":"Resources"},{"location":"about-mkdocs/#reasons-to-use-glados-compiler","text":"Create a programming language tailored to your own design. Built with Haskell for concise, functional, and efficient code generation. Progressive learning curve. The project is divided into manageable steps. Designed to guide you through increasing levels of complexity smoothly. Customizable. Explore and implement unique language features. Freedom to experiment with syntax and semantics. Educational value. Learn compiler design fundamentals, including parsing, type systems, and code generation. Gain a deeper understanding of functional programming and language theory. Engaging and fun. Promised \"cake and grief counseling\" to keep the experience lighthearted. Build something truly unique and rewarding.","title":"Reasons to use Glados Compiler"},{"location":"tutorial/advanced/","text":"Advanced Beyond the basic configuration and content Once you've got the basics of compiler functionality down, you can explore deeper using this guide to understand its key components: the frontend, AST, middlend, and backend. FRONTEND COMPILER The frontend is responsible for parsing source code and converting it into an intermediate representation. This includes: Lexical Analysis : Tokenizing the input code into symbols and keywords. Syntax Analysis : Creating a syntax tree based on grammar rules. Semantic Analysis : Checking for type consistency, scope validation, and other rules. For example, this step generates an Abstract Syntax Tree (AST), representing the code's structure. Frontend: - Lexical Analysis - Syntax Analysis - Semantic Analysis - Output: AST The frontend must be defined using a configuration file that describes the grammar of the target source language. An example of lisp and js config file Config file for JS boolean{prefix:\"(\", suffix:\")\"}: [\"true\", \"false\"] variable{prefix:\"\", suffix: \"\"}: [\"let\", \"const\", \"var\"] operators: [plus: expression -> \"+\" -> expression , minus: expression -> \"-\" -> expression , multiply: expression -> \"*\" -> expression , divide: expression -> \"/\" -> expression , modulo: expression -> \"%\" -> expression , equal: expression -> \"===\" -> expression , assignation: expression -> \"=\" -> expression, less: expression -> \"<\" -> expression, greater: expression -> \">\" -> expression] condition{prefix: \"(\", suffix: \")\"}: expression parameters{prefix: \"(\", suffix: \")\"}: name -> \",\" codeBlock{prefix: \"{\", suffix: \"}\"}: [\"\\n\",\";\"] if: [\"if\"] -> [\"else\"] function: [\"function\"] -> name -> parameters -> codeBlock callable: [\"(\"] -> \",\" -> [\")\"] Config file for Lisp boolean{prefix: \"(\", suffix: \")\"}: [\"#t\", \"#f\"] variable{prefix: \"(\", suffix: \")\"}: [\"define\"] operators{prefix: \"(\", suffix: \")\"}: [plus: \"+\" -> expression -> expression, minus: \"-\" -> expression -> expression, multiply: \"*\" -> expression -> expression, divide: \"/\" -> expression -> expression, modulo: \"%\" -> expression -> expression, equal: \"eq?\" -> expression -> expression, assignation: name -> \"=\" -> expression] condition{prefix: \"(\", suffix: \")\"}: expression parameters{prefix: \"(\", suffix: \")\"}: name -> \" \" codeBlock{prefix: \"(\", suffix: \")\"}: [\"\"] if{prefix: \"(\", suffix: \")\"}: [\"if\"] -> [\"\"] function{prefix: \"(\", suffix: \")\"}: [\"define\"] -> name -> parameters -> codeBlock Structure of our bytecode file MAGIC-NUMBER: - SPICEGLA SECTION: - REST OF THE BYTECODE Spice compiler est capable de d\u00e9tecter certains autre format de donn\u00e9 tel que fichier binaire ELF ou bytecode de la JVM ou de C# $ ./glados [-e|--execute] out.elf \"Does not support ELF files\"","title":"Advanced"},{"location":"tutorial/advanced/#advanced","text":"Beyond the basic configuration and content Once you've got the basics of compiler functionality down, you can explore deeper using this guide to understand its key components: the frontend, AST, middlend, and backend.","title":"Advanced"},{"location":"tutorial/advanced/#frontend-compiler","text":"The frontend is responsible for parsing source code and converting it into an intermediate representation. This includes: Lexical Analysis : Tokenizing the input code into symbols and keywords. Syntax Analysis : Creating a syntax tree based on grammar rules. Semantic Analysis : Checking for type consistency, scope validation, and other rules. For example, this step generates an Abstract Syntax Tree (AST), representing the code's structure. Frontend: - Lexical Analysis - Syntax Analysis - Semantic Analysis - Output: AST The frontend must be defined using a configuration file that describes the grammar of the target source language. An example of lisp and js config file Config file for JS boolean{prefix:\"(\", suffix:\")\"}: [\"true\", \"false\"] variable{prefix:\"\", suffix: \"\"}: [\"let\", \"const\", \"var\"] operators: [plus: expression -> \"+\" -> expression , minus: expression -> \"-\" -> expression , multiply: expression -> \"*\" -> expression , divide: expression -> \"/\" -> expression , modulo: expression -> \"%\" -> expression , equal: expression -> \"===\" -> expression , assignation: expression -> \"=\" -> expression, less: expression -> \"<\" -> expression, greater: expression -> \">\" -> expression] condition{prefix: \"(\", suffix: \")\"}: expression parameters{prefix: \"(\", suffix: \")\"}: name -> \",\" codeBlock{prefix: \"{\", suffix: \"}\"}: [\"\\n\",\";\"] if: [\"if\"] -> [\"else\"] function: [\"function\"] -> name -> parameters -> codeBlock callable: [\"(\"] -> \",\" -> [\")\"] Config file for Lisp boolean{prefix: \"(\", suffix: \")\"}: [\"#t\", \"#f\"] variable{prefix: \"(\", suffix: \")\"}: [\"define\"] operators{prefix: \"(\", suffix: \")\"}: [plus: \"+\" -> expression -> expression, minus: \"-\" -> expression -> expression, multiply: \"*\" -> expression -> expression, divide: \"/\" -> expression -> expression, modulo: \"%\" -> expression -> expression, equal: \"eq?\" -> expression -> expression, assignation: name -> \"=\" -> expression] condition{prefix: \"(\", suffix: \")\"}: expression parameters{prefix: \"(\", suffix: \")\"}: name -> \" \" codeBlock{prefix: \"(\", suffix: \")\"}: [\"\"] if{prefix: \"(\", suffix: \")\"}: [\"if\"] -> [\"\"] function{prefix: \"(\", suffix: \")\"}: [\"define\"] -> name -> parameters -> codeBlock","title":"FRONTEND COMPILER"},{"location":"tutorial/advanced/#structure-of-our-bytecode-file","text":"MAGIC-NUMBER: - SPICEGLA SECTION: - REST OF THE BYTECODE Spice compiler est capable de d\u00e9tecter certains autre format de donn\u00e9 tel que fichier binaire ELF ou bytecode de la JVM ou de C# $ ./glados [-e|--execute] out.elf \"Does not support ELF files\"","title":"Structure of our bytecode file"},{"location":"tutorial/deploy/","text":"Deploy Build and deploy to a remote public site See Deploying Your Docs on the Mkdocs site for more details. GitHub Pages How to deploy your docs site to GitHub Pages. Follow one of the approaches below: Run deploy command - Run a MkDocs CLI command locally to deploy. Deploy with GitHub Actions - Use the project's CI workflow in the cloud to build and deploy to GH Pages on commits pushed to master. Then go to your repo's Settings and Pages then enable GitHub Pages on the gh-pages branch's root. Note this is for a Project Page on a subpath, you will have to make adjustments to the command below if you want an Organization or User Page on the root path. Run deploy command Run a MkDocs CLI command locally to deploy MkDocs needs to know where to publish commits on GitHub - so make sure you are working with a repo that you cloned, or that you initialize the local repo and add a remote repo. Run this command locally: $ make d That will use Makefile to run the following: $ mkdocs gh-deploy --strict --force That will do the following: Clean and build to site directory. Force push to gh-pages branch, overwriting any changes which were pushed from another build. Then go to your repo on GitHub, look at the Environment tab. When it is done building, click View deployment to see your site. e.g. michaelcurrin.github.io/mkdocs-quickstart/ See deploy options in the help: $ mkdocs gh-deploy --help Deploy with GitHub Actions Set up continuous deployment config to enable deploys on a change to files on GitHub When you make changes to your docs config or the docs directory, especially editing on GitHub directly, it's often useful to have the docs site build and deploy automatically in a remote environment. This is provided for free by GitHub. See the docs.yml workflow provided with this project. You don't have to change anything there. The token will be generated for you by GitHub Actions.","title":"Deploy"},{"location":"tutorial/deploy/#deploy","text":"Build and deploy to a remote public site See Deploying Your Docs on the Mkdocs site for more details.","title":"Deploy"},{"location":"tutorial/deploy/#github-pages","text":"How to deploy your docs site to GitHub Pages. Follow one of the approaches below: Run deploy command - Run a MkDocs CLI command locally to deploy. Deploy with GitHub Actions - Use the project's CI workflow in the cloud to build and deploy to GH Pages on commits pushed to master. Then go to your repo's Settings and Pages then enable GitHub Pages on the gh-pages branch's root. Note this is for a Project Page on a subpath, you will have to make adjustments to the command below if you want an Organization or User Page on the root path.","title":"GitHub Pages"},{"location":"tutorial/deploy/#run-deploy-command","text":"Run a MkDocs CLI command locally to deploy MkDocs needs to know where to publish commits on GitHub - so make sure you are working with a repo that you cloned, or that you initialize the local repo and add a remote repo. Run this command locally: $ make d That will use Makefile to run the following: $ mkdocs gh-deploy --strict --force That will do the following: Clean and build to site directory. Force push to gh-pages branch, overwriting any changes which were pushed from another build. Then go to your repo on GitHub, look at the Environment tab. When it is done building, click View deployment to see your site. e.g. michaelcurrin.github.io/mkdocs-quickstart/ See deploy options in the help: $ mkdocs gh-deploy --help","title":"Run deploy command"},{"location":"tutorial/deploy/#deploy-with-github-actions","text":"Set up continuous deployment config to enable deploys on a change to files on GitHub When you make changes to your docs config or the docs directory, especially editing on GitHub directly, it's often useful to have the docs site build and deploy automatically in a remote environment. This is provided for free by GitHub. See the docs.yml workflow provided with this project. You don't have to change anything there. The token will be generated for you by GitHub Actions.","title":"Deploy with GitHub Actions"},{"location":"tutorial/installation/","text":"Installation How to install SPICE compiler locally. Requirements ghc haskell-stack make - standard on macOS and Linux but can be installed on Windows too. Install system dependencies Dependencies are automatically managed by stack $ git clone git@github.com:etib-corp/SPICE.git $ cd SPICE $ make","title":"Installation"},{"location":"tutorial/installation/#installation","text":"How to install SPICE compiler locally.","title":"Installation"},{"location":"tutorial/installation/#requirements","text":"ghc haskell-stack make - standard on macOS and Linux but can be installed on Windows too.","title":"Requirements"},{"location":"tutorial/installation/#install-system-dependencies","text":"Dependencies are automatically managed by stack $ git clone git@github.com:etib-corp/SPICE.git $ cd SPICE $ make","title":"Install system dependencies"},{"location":"tutorial/setup-project/","text":"Set up project How to create a MkDocs site from scratch This is a summary of the tutorial on mkdocs.org . How to use this guide Use one of the approaches below: Create a quickstart project with the new command covered in Create a starter site . Follow the extended guide to create a Set up up docs site by hand. Basic structure This is the simplest MkDocs site you can make: docs/ index.md - Homepage in the docs directory (by default). mkdocs.yml Config at the root - control appearance and navigation of your site. See this project's docs/mkdocs.yml file on GitHub. Notes on fields for the config: site_name - title of your site. site_description - used as a description for SEO and you could use it somewhere in your template. site_url - now a required field when running a deploy. Include the subpath on the domain. If your site is not ready to be hosted, set this field to an empty string. repo_url - for Edit on GitHub button. See docs . edit_uri - defaults to edit/master/docs/ , which includes docs directory of markdown files inside your repo root. But, if the site's root is in an outer docs directory, then you need to also add that, so paths do not break. e.g. edit/master/docs/docs . See docs Requirements file A requirements file is optional but it can make it easier to manage dependencies. If you choose not use the file, make sure pip install mkdocs and pip install THEME lines are your instructions. If you want to add, then include requirements.txt at the root. If your project is already a Python project, you might prefer to add mkdocs in requirements-dev.txt or at docs/requirements.txt to keep it isolated.This file should have mkdocs in it and also any themes if needed. Create a starter site Run this command to create a starter site. This make the steps below go quicker. cd my-project mkdocs new PATH The result will be same as the Basic structure defined above and will include minimal text content generated by the MkDocs CLI. This text is defined in the project's new.py module. Set up a docs site Tip: Optionally use the new command covered above to set up the config and index page first and then continue . Create doc pages. Create a docs directory. Create index.md as your homepage. Create other markdown pages (optional). Use placeholder content if you want to move on and then come back to expand them. If you have any existing markdown docs, these will work too. Set up config. Create mkdocs.yml at the project root. Set up a navbar there. Choose a theme. Create a favicon (optional). It will be picked up at this path: docs/img/favicon.ico . Add to your .gitignore . Add build directory. This will prevent it from being versioned on master branch. Add virtual environment, if using one. You project should now look this this: docs/ index.md More pages... mkdocs.yml .gitignore venv requirements.txt - optional Sample content Ignore file .gitignore site/ venv Navbar mkdocs.yml nav: - Home: index.md - About: about.md Themes Builtin Use a builtin theme that comes with MkDocs. The default. theme: mkdocs Using ReadTheDocs theme and alternative config syntax. theme: name: readthedocs Find more supported themes . If it doesn't immediately, you'll have to use pip to install it and add to a requirements.txt file. ReadTheDocs Dropdown theme See below using mkdocs-rtd-dropdown . requirements.txt : mkdocs-rtd-dropdown mkdocs.yml : theme: name: 'rtd-dropdown' Material for MkdDocs theme See the MkDocs for Material homepage. See the Set up page for config options. requirements.txt : mkdocs-material-extensions>=1.0 mkdocs.yml : theme: name: 'material'","title":"Set up project"},{"location":"tutorial/setup-project/#set-up-project","text":"How to create a MkDocs site from scratch This is a summary of the tutorial on mkdocs.org .","title":"Set up project"},{"location":"tutorial/setup-project/#how-to-use-this-guide","text":"Use one of the approaches below: Create a quickstart project with the new command covered in Create a starter site . Follow the extended guide to create a Set up up docs site by hand.","title":"How to use this guide"},{"location":"tutorial/setup-project/#basic-structure","text":"This is the simplest MkDocs site you can make: docs/ index.md - Homepage in the docs directory (by default). mkdocs.yml Config at the root - control appearance and navigation of your site. See this project's docs/mkdocs.yml file on GitHub. Notes on fields for the config: site_name - title of your site. site_description - used as a description for SEO and you could use it somewhere in your template. site_url - now a required field when running a deploy. Include the subpath on the domain. If your site is not ready to be hosted, set this field to an empty string. repo_url - for Edit on GitHub button. See docs . edit_uri - defaults to edit/master/docs/ , which includes docs directory of markdown files inside your repo root. But, if the site's root is in an outer docs directory, then you need to also add that, so paths do not break. e.g. edit/master/docs/docs . See docs","title":"Basic structure"},{"location":"tutorial/setup-project/#requirements-file","text":"A requirements file is optional but it can make it easier to manage dependencies. If you choose not use the file, make sure pip install mkdocs and pip install THEME lines are your instructions. If you want to add, then include requirements.txt at the root. If your project is already a Python project, you might prefer to add mkdocs in requirements-dev.txt or at docs/requirements.txt to keep it isolated.This file should have mkdocs in it and also any themes if needed.","title":"Requirements file"},{"location":"tutorial/setup-project/#create-a-starter-site","text":"Run this command to create a starter site. This make the steps below go quicker. cd my-project mkdocs new PATH The result will be same as the Basic structure defined above and will include minimal text content generated by the MkDocs CLI. This text is defined in the project's new.py module.","title":"Create a starter site"},{"location":"tutorial/setup-project/#set-up-a-docs-site","text":"Tip: Optionally use the new command covered above to set up the config and index page first and then continue . Create doc pages. Create a docs directory. Create index.md as your homepage. Create other markdown pages (optional). Use placeholder content if you want to move on and then come back to expand them. If you have any existing markdown docs, these will work too. Set up config. Create mkdocs.yml at the project root. Set up a navbar there. Choose a theme. Create a favicon (optional). It will be picked up at this path: docs/img/favicon.ico . Add to your .gitignore . Add build directory. This will prevent it from being versioned on master branch. Add virtual environment, if using one. You project should now look this this: docs/ index.md More pages... mkdocs.yml .gitignore venv requirements.txt - optional","title":"Set up a docs site"},{"location":"tutorial/setup-project/#sample-content","text":"","title":"Sample content"},{"location":"tutorial/setup-project/#ignore-file","text":".gitignore site/ venv","title":"Ignore file"},{"location":"tutorial/setup-project/#navbar","text":"mkdocs.yml nav: - Home: index.md - About: about.md","title":"Navbar"},{"location":"tutorial/setup-project/#themes","text":"","title":"Themes"},{"location":"tutorial/setup-project/#builtin","text":"Use a builtin theme that comes with MkDocs. The default. theme: mkdocs Using ReadTheDocs theme and alternative config syntax. theme: name: readthedocs Find more supported themes . If it doesn't immediately, you'll have to use pip to install it and add to a requirements.txt file.","title":"Builtin"},{"location":"tutorial/setup-project/#readthedocs-dropdown-theme","text":"See below using mkdocs-rtd-dropdown . requirements.txt : mkdocs-rtd-dropdown mkdocs.yml : theme: name: 'rtd-dropdown'","title":"ReadTheDocs Dropdown theme"},{"location":"tutorial/setup-project/#material-for-mkddocs-theme","text":"See the MkDocs for Material homepage. See the Set up page for config options. requirements.txt : mkdocs-material-extensions>=1.0 mkdocs.yml : theme: name: 'material'","title":"Material for MkdDocs theme"},{"location":"tutorial/theorical/","text":"Advanced Beyond the basic configuration and content Once you've got the basics of compiler functionality down, you can explore deeper using this guide to understand its key components: the frontend, AST, middlend, and backend. FRONTEND COMPILER The frontend is responsible for parsing source code and converting it into an intermediate representation. This includes: Lexical Analysis : Tokenizing the input code into symbols and keywords. Syntax Analysis : Creating a syntax tree based on grammar rules. Semantic Analysis : Checking for type consistency, scope validation, and other rules. For example, this step generates an Abstract Syntax Tree (AST), representing the code's structure. Frontend: - Lexical Analysis - Syntax Analysis - Semantic Analysis - Output: AST ABSTRACT SYNTAX TREE (AST) The AST is a crucial intermediary representation that abstracts away unnecessary syntax details, leaving only the essential structure needed for further compilation. - Nodes represent code constructs (e.g., loops, conditions, assignments). - Used for optimizing and translating code in later stages. MIDDLEND COMPILER Integration in progress, but the main idea is : The middlend performs optimizations on the AST or Intermediate Representation (IR), ensuring efficient execution. - Intermediate Representation: Converts the AST into a lower-level format suitable for optimization. - Optimization Techniques: - Dead code elimination. - Loop unrolling. - Constant folding. For example, it ensures efficient memory usage and faster runtime execution. BACKEND COMPILER The backend takes the optimized IR and generates target-specific machine code. - Code Generation: - Translates IR into assembly or machine code. - Allocates registers and manages memory. - Target-specific Optimizations: - Applies optimizations based on the architecture (e.g., x86, ARM). - Output: Produces an executable file or binary. Example project structure for backend integration: Compiler: - Interpreter/ - Parsing/ - Semantic Checking/ - Virtual Machine/ - Just In Time Compilation/","title":"Theoretical functioning"},{"location":"tutorial/theorical/#advanced","text":"Beyond the basic configuration and content Once you've got the basics of compiler functionality down, you can explore deeper using this guide to understand its key components: the frontend, AST, middlend, and backend.","title":"Advanced"},{"location":"tutorial/theorical/#frontend-compiler","text":"The frontend is responsible for parsing source code and converting it into an intermediate representation. This includes: Lexical Analysis : Tokenizing the input code into symbols and keywords. Syntax Analysis : Creating a syntax tree based on grammar rules. Semantic Analysis : Checking for type consistency, scope validation, and other rules. For example, this step generates an Abstract Syntax Tree (AST), representing the code's structure. Frontend: - Lexical Analysis - Syntax Analysis - Semantic Analysis - Output: AST","title":"FRONTEND COMPILER"},{"location":"tutorial/theorical/#abstract-syntax-tree-ast","text":"The AST is a crucial intermediary representation that abstracts away unnecessary syntax details, leaving only the essential structure needed for further compilation. - Nodes represent code constructs (e.g., loops, conditions, assignments). - Used for optimizing and translating code in later stages.","title":"ABSTRACT SYNTAX TREE (AST)"},{"location":"tutorial/theorical/#middlend-compiler","text":"Integration in progress, but the main idea is : The middlend performs optimizations on the AST or Intermediate Representation (IR), ensuring efficient execution. - Intermediate Representation: Converts the AST into a lower-level format suitable for optimization. - Optimization Techniques: - Dead code elimination. - Loop unrolling. - Constant folding. For example, it ensures efficient memory usage and faster runtime execution.","title":"MIDDLEND COMPILER"},{"location":"tutorial/theorical/#backend-compiler","text":"The backend takes the optimized IR and generates target-specific machine code. - Code Generation: - Translates IR into assembly or machine code. - Allocates registers and manages memory. - Target-specific Optimizations: - Applies optimizations based on the architecture (e.g., x86, ARM). - Output: Produces an executable file or binary. Example project structure for backend integration: Compiler: - Interpreter/ - Parsing/ - Semantic Checking/ - Virtual Machine/ - Just In Time Compilation/","title":"BACKEND COMPILER"},{"location":"tutorial/tldr/","text":"TL;DR A simplified version of the tutorial. Local setup Install pip install mkdocs Set up project mkdocs new . or Run mkdocs serve View on localhost:8000 Deploy to remote site Run deploy command locally Deploy to GitHub Pages mkdocs gh-deploy View published site on GitHub Pages at https://USERNAME.github.io/REPO-NAME/ Run continuous integration For CI/CD deploy, use GitHub Actions with an action such as Deploy MkDocs . Or use Netlify. This is not covered in this tutorial.","title":"TL;DR"},{"location":"tutorial/tldr/#tldr","text":"A simplified version of the tutorial.","title":"TL;DR"},{"location":"tutorial/tldr/#local-setup","text":"Install pip install mkdocs Set up project mkdocs new . or Run mkdocs serve View on localhost:8000","title":"Local setup"},{"location":"tutorial/tldr/#deploy-to-remote-site","text":"","title":"Deploy to remote site"},{"location":"tutorial/tldr/#run-deploy-command-locally","text":"Deploy to GitHub Pages mkdocs gh-deploy View published site on GitHub Pages at https://USERNAME.github.io/REPO-NAME/","title":"Run deploy command locally"},{"location":"tutorial/tldr/#run-continuous-integration","text":"For CI/CD deploy, use GitHub Actions with an action such as Deploy MkDocs . Or use Netlify. This is not covered in this tutorial.","title":"Run continuous integration"},{"location":"tutorial/usage/","text":"Usage Build and preview a site locally Make sure to run all commands from the root directory, as that is where Makefile is. $ cd SPICE CLI help $ ./glados --help Usage: optparse-app [-v|--verbose] [-c|--config FILE] [FILES...] [-e|--execute] [-C|--compile] [-P|--preprocess] Available options: -v,--verbose Verbose output -c,--config FILE Configuration file -e,--execute Execute the program -C,--compile Compile the program -P,--preprocess Preprocess the program -h,--help Show this help text or $ ./glados -h Usage: optparse-app [-v|--verbose] [-c|--config FILE] [FILES...] [-e|--execute] [-C|--compile] [-P|--preprocess] Available options: -v,--verbose Verbose output -c,--config FILE Configuration file -e,--execute Execute the program -C,--compile Compile the program -P,--preprocess Preprocess the program -h,--help Show this help text DOCS Please check the main repository https://github.com/etib-corp/SPICE?tab=readme-ov-file#readme Build SPICE Build SPICE compiler. $ make or $ make build Usage of Basic Interpreter Use this project in two ways: read from a file or interact directly via prompt input $ ./glados < foo.scm or $ ./glados > foo *** ERROR : variable foo is not bound. > (define foo 42) > foo 42 Usage of Spice Compiler $ ./glados [-c|--config] config.js [-C|--compile] your_source_code.ext The resulting file is out.bin by default. It contains the bytecode of the compiled source code $ ls out.bin You can use [-P|--preprocess] to switch in preprocessing mode $ ./glados [-c|--config] config.js [-C|--compile] your_source_code.ext [-P|--preprocess] [] [] [CallFunc \"facto\" [[PushInt 5]],Print] [22,102,97,99,116,111,0,4,0,1,5,0,255,21] Usage of Spice VM (Virtual Machine) $ ./glados [-e|--execute] out.bin ... SPICE Interpreter Features Function declaration : (define add (lambda (a b) (+ a b))) (add 3 4) Builtin's function : (+ (* 2 3) (div 10 2)) (* (* 2 3) (div 10 2)) (- (* 2 3) (div 10 2)) (eq (* 2 3) (div 10 2)) (< (* 2 3) (div 10 2)) (div (* 2 3) (div 10 2)) Conditional jump: (if #t 1 2) Clean SPICE repository Clean repository. $ make clean","title":"Usage"},{"location":"tutorial/usage/#usage","text":"Build and preview a site locally Make sure to run all commands from the root directory, as that is where Makefile is. $ cd SPICE","title":"Usage"},{"location":"tutorial/usage/#cli-help","text":"$ ./glados --help Usage: optparse-app [-v|--verbose] [-c|--config FILE] [FILES...] [-e|--execute] [-C|--compile] [-P|--preprocess] Available options: -v,--verbose Verbose output -c,--config FILE Configuration file -e,--execute Execute the program -C,--compile Compile the program -P,--preprocess Preprocess the program -h,--help Show this help text or $ ./glados -h Usage: optparse-app [-v|--verbose] [-c|--config FILE] [FILES...] [-e|--execute] [-C|--compile] [-P|--preprocess] Available options: -v,--verbose Verbose output -c,--config FILE Configuration file -e,--execute Execute the program -C,--compile Compile the program -P,--preprocess Preprocess the program -h,--help Show this help text","title":"CLI help"},{"location":"tutorial/usage/#docs","text":"Please check the main repository https://github.com/etib-corp/SPICE?tab=readme-ov-file#readme","title":"DOCS"},{"location":"tutorial/usage/#build-spice","text":"Build SPICE compiler. $ make or $ make build","title":"Build SPICE"},{"location":"tutorial/usage/#usage-of-basic-interpreter","text":"Use this project in two ways: read from a file or interact directly via prompt input $ ./glados < foo.scm or $ ./glados > foo *** ERROR : variable foo is not bound. > (define foo 42) > foo 42","title":"Usage of Basic Interpreter"},{"location":"tutorial/usage/#usage-of-spice-compiler","text":"$ ./glados [-c|--config] config.js [-C|--compile] your_source_code.ext The resulting file is out.bin by default. It contains the bytecode of the compiled source code $ ls out.bin You can use [-P|--preprocess] to switch in preprocessing mode $ ./glados [-c|--config] config.js [-C|--compile] your_source_code.ext [-P|--preprocess] [] [] [CallFunc \"facto\" [[PushInt 5]],Print] [22,102,97,99,116,111,0,4,0,1,5,0,255,21]","title":"Usage of Spice Compiler"},{"location":"tutorial/usage/#usage-of-spice-vm-virtual-machine","text":"$ ./glados [-e|--execute] out.bin ...","title":"Usage of Spice VM (Virtual Machine)"},{"location":"tutorial/usage/#spice-interpreter-features","text":"Function declaration : (define add (lambda (a b) (+ a b))) (add 3 4) Builtin's function : (+ (* 2 3) (div 10 2)) (* (* 2 3) (div 10 2)) (- (* 2 3) (div 10 2)) (eq (* 2 3) (div 10 2)) (< (* 2 3) (div 10 2)) (div (* 2 3) (div 10 2)) Conditional jump: (if #t 1 2)","title":"SPICE Interpreter Features"},{"location":"tutorial/usage/#clean-spice-repository","text":"Clean repository. $ make clean","title":"Clean SPICE repository"}]}